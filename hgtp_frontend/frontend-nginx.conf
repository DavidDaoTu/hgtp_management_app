### References:
# 1. https://github.com/kubernetes/website/blob/main/content/en/examples/service/access/frontend-nginx.conf
# 2. https://github.com/kubernetes/website/blob/main/content/en/examples/service/access/Dockerfile
# 3. https://kubernetes.io/docs/tasks/access-application-cluster/connecting-frontend-backend/
# 4. https://nginx.org/en/docs/beginners_guide.html
# 5. https://www.nginx.com/resources/wiki/start/topics/examples/full/

# worker_processes auto;
# events { worker_connections 1024; }
# error_log /dev/stdout debug;


# http {
#     sendfile on;

    # # The identifier reverseproxy is internal to nginx, and used to name this specific upstream
    # upstream reverseproxy {
    #     # reverse-proxy is the internal DNS name used by the reverse-proxy Service inside Kubernetes
    #     server reverse-proxy:8080;
    # }

    # proxy_set_header   Host $host;
    # proxy_set_header   X-Real-IP $remote_addr;
    # proxy_set_header   X-NginX-Proxy true;
    # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header   X-Forwarded-Host $server_name;  
    # Default
# map $http_origin $cors_origin_header {
#     default "";
#     "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "$http_origin";
#     "~^https://test-.-dev.example.pl$" "$http_origin"; # https://test-7-dev.example.pl
#     "https://test.example.com" "$http_origin";
#     "http://master_node.mydomain.net" "$http_origin";
# }

# map $http_origin $cors_cred {
#     default "";
#     "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "true";
#     "~^https://test-.-dev.example.pl$" "true"; # https://test-7-dev.example.pl
#     "https://test.example.com" "true";
#     "http://master_node.mydomain.net" "true";
# }

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        
        
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
    # location /api {
    #     # The following statement will proxy/forward traffic to the upstream named reverseproxy
    #     proxy_pass http://reverseproxy/api;
    # }
}

    # server {
    #     listen 80; # Frontend's container listening port
    #     # location / {
    #     #     # The following statement will proxy/forward traffic to the upstream named reverseproxy
    #     #     root /usr/share/nginx/html;
    #     # }
    #     # References:
    #     # 1. https://dev.to/danielkun/nginx-everything-about-proxypass-2ona
    #     location /api {
    #         # The following statement will proxy/forward traffic to the upstream named reverseproxy
    #         proxy_pass http://reverseproxy/api;
    #     }
    # }

# }
